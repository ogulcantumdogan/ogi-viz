{
  "baseVals": {
    "rating": 5,
    "gammaadj": 1.2,
    "decay": 0.98,
    "echo_zoom": 1.02,
    "echo_alpha": 0.6,
    "echo_orient": 0,
    "wave_mode": 0,
    "additivewave": 0,
    "wave_dots": 0,
    "wave_thick": 0,
    "modwavealphabyvolume": 0,
    "modwavealphastart": 0.5,
    "modwavealphaend": 1,
    "wave_brighten": 0,
    "darken_center": 0,
    "wrap": 0,
    "darken": 0,
    "brighten": 0,
    "wave_a": 0.1,
    "wave_scale": 0.5,
    "wave_smoothing": 0.5,
    "wave_mystery": 0,
    "warpanimspeed": 1,
    "warpscale": 1,
    "zoomexp": 1,
    "zoom": 1.005,
    "rot": 0,
    "cx": 0.5,
    "cy": 0.5,
    "dx": 0,
    "dy": 0,
    "warp": 0.02,
    "sx": 1,
    "sy": 1,
    "wave_r": 1,
    "wave_g": 0.8,
    "wave_b": 0.3,
    "wave_x": 0.5,
    "wave_y": 0.5,
    "ob_size": 0,
    "ob_r": 0,
    "ob_g": 0,
    "ob_b": 0,
    "ob_a": 0,
    "ib_size": 0,
    "ib_r": 0,
    "ib_g": 0,
    "ib_b": 0,
    "ib_a": 0,
    "nMotionVectorsX": 64,
    "nMotionVectorsY": 48,
    "mv_x": 0,
    "mv_y": 0,
    "mv_dx": 0,
    "mv_dy": 0,
    "mv_l": 0.9,
    "mv_r": 1,
    "mv_g": 1,
    "mv_b": 1,
    "mv_a": 0
  },
  "shapes": [
    {
      "baseVals": {
        "enabled": 1,
        "sides": 100,
        "additive": 1,
        "thick": 0,
        "textured": 0,
        "num_inst": 1,
        "x": 0.5,
        "y": 0.5,
        "rad": 0.15,
        "ang": 0,
        "tex_ang": 0,
        "tex_zoom": 1,
        "r": 1,
        "g": 1,
        "b": 0.2,
        "a": 0.8,
        "r2": 1,
        "g2": 1,
        "b2": 0.2,
        "a2": 0.8,
        "border_r": 1,
        "border_g": 1,
        "border_b": 0.2,
        "border_a": 0.9
      },
      "init_eqs_str": "a.gen=0;a.split_time=0;a.face_count=1;a.scale_factor=1;",
      "frame_eqs_str": "a.split_time+=0.02;a.gen=Math.floor(a.split_time);a.face_count=pow(2,Math.min(a.gen,4));a.scale_factor=1/sqrt(a.face_count);a.r=0.8+0.2*Math.sin(2*a.time);a.g=0.9+0.1*Math.cos(1.5*a.time);a.b=0.3+0.2*Math.sin(3*a.time);a.rad=0.15*a.scale_factor;",
      "init_eqs_eel": "gen = 0;\nsplit_time = 0;\nface_count = 1;\nscale_factor = 1;",
      "frame_eqs_eel": "split_time = split_time + 0.02;\ngen = int(split_time);\nface_count = pow(2, min(gen, 4));\nscale_factor = 1/sqrt(face_count);\nr = 0.8 + 0.2*sin(2*time);\ng = 0.9 + 0.1*cos(1.5*time);\nb = 0.3 + 0.2*sin(3*time);\nrad = 0.15 * scale_factor;\n\n// Fractal positioning\noffset_x = 0.2 * scale_factor * sin(time * 0.5);\noffset_y = 0.2 * scale_factor * cos(time * 0.7);\n\n// Main face position with fractal spreading\nface_id = 0;\nrow = int(sqrt(face_count));\ncol = face_id % row;\nrow_num = int(face_id / row);\n\nspread = 0.4 * scale_factor;\nx = 0.5 + (col - row/2) * spread + offset_x;\ny = 0.5 + (row_num - row/2) * spread + offset_y;"
    },
    {
      "baseVals": {
        "enabled": 1,
        "sides": 100,
        "additive": 1,
        "thick": 0,
        "textured": 0,
        "num_inst": 1,
        "x": 0.42,
        "y": 0.42,
        "rad": 0.02,
        "ang": 0,
        "tex_ang": 0,
        "tex_zoom": 1,
        "r": 0.2,
        "g": 0.2,
        "b": 0.8,
        "a": 0.9,
        "r2": 0.2,
        "g2": 0.2,
        "b2": 0.8,
        "a2": 0.9,
        "border_r": 0.1,
        "border_g": 0.1,
        "border_b": 0.9,
        "border_a": 1
      },
      "init_eqs_str": "a.gen=0;a.split_time=0;a.face_count=1;a.scale_factor=1;a.eye_offset=0.08;",
      "frame_eqs_str": "a.split_time+=0.02;a.gen=Math.floor(a.split_time);a.face_count=pow(2,Math.min(a.gen,4));a.scale_factor=1/sqrt(a.face_count);a.rad=0.02*a.scale_factor;a.eye_offset=0.08*a.scale_factor;",
      "init_eqs_eel": "gen = 0;\nsplit_time = 0;\nface_count = 1;\nscale_factor = 1;\neye_offset = 0.08;",
      "frame_eqs_eel": "split_time = split_time + 0.02;\ngen = int(split_time);\nface_count = pow(2, min(gen, 4));\nscale_factor = 1/sqrt(face_count);\nrad = 0.02 * scale_factor;\neye_offset = 0.08 * scale_factor;\n\n// Fractal positioning for left eye\noffset_x = 0.2 * scale_factor * sin(time * 0.5);\noffset_y = 0.2 * scale_factor * cos(time * 0.7);\n\nface_id = 0;\nrow = int(sqrt(face_count));\ncol = face_id % row;\nrow_num = int(face_id / row);\n\nspread = 0.4 * scale_factor;\nbase_x = 0.5 + (col - row/2) * spread + offset_x;\nbase_y = 0.5 + (row_num - row/2) * spread + offset_y;\n\nx = base_x - eye_offset;\ny = base_y - eye_offset * 0.3;"
    },
    {
      "baseVals": {
        "enabled": 1,
        "sides": 100,
        "additive": 1,
        "thick": 0,
        "textured": 0,
        "num_inst": 1,
        "x": 0.58,
        "y": 0.42,
        "rad": 0.02,
        "ang": 0,
        "tex_ang": 0,
        "tex_zoom": 1,
        "r": 0.2,
        "g": 0.2,
        "b": 0.8,
        "a": 0.9,
        "r2": 0.2,
        "g2": 0.2,
        "b2": 0.8,
        "a2": 0.9,
        "border_r": 0.1,
        "border_g": 0.1,
        "border_b": 0.9,
        "border_a": 1
      },
      "init_eqs_str": "a.gen=0;a.split_time=0;a.face_count=1;a.scale_factor=1;a.eye_offset=0.08;",
      "frame_eqs_str": "a.split_time+=0.02;a.gen=Math.floor(a.split_time);a.face_count=pow(2,Math.min(a.gen,4));a.scale_factor=1/sqrt(a.face_count);a.rad=0.02*a.scale_factor;a.eye_offset=0.08*a.scale_factor;",
      "init_eqs_eel": "gen = 0;\nsplit_time = 0;\nface_count = 1;\nscale_factor = 1;\neye_offset = 0.08;",
      "frame_eqs_eel": "split_time = split_time + 0.02;\ngen = int(split_time);\nface_count = pow(2, min(gen, 4));\nscale_factor = 1/sqrt(face_count);\nrad = 0.02 * scale_factor;\neye_offset = 0.08 * scale_factor;\n\n// Fractal positioning for right eye\noffset_x = 0.2 * scale_factor * sin(time * 0.5);\noffset_y = 0.2 * scale_factor * cos(time * 0.7);\n\nface_id = 0;\nrow = int(sqrt(face_count));\ncol = face_id % row;\nrow_num = int(face_id / row);\n\nspread = 0.4 * scale_factor;\nbase_x = 0.5 + (col - row/2) * spread + offset_x;\nbase_y = 0.5 + (row_num - row/2) * spread + offset_y;\n\nx = base_x + eye_offset;\ny = base_y - eye_offset * 0.3;"
    },
    {
      "baseVals": {
        "enabled": 1,
        "sides": 20,
        "additive": 1,
        "thick": 1,
        "textured": 0,
        "num_inst": 1,
        "x": 0.5,
        "y": 0.58,
        "rad": 0.05,
        "ang": 0,
        "tex_ang": 0,
        "tex_zoom": 1,
        "r": 0.9,
        "g": 0.3,
        "b": 0.3,
        "a": 0.8,
        "r2": 0.9,
        "g2": 0.3,
        "b2": 0.3,
        "a2": 0.8,
        "border_r": 1,
        "border_g": 0.2,
        "border_b": 0.2,
        "border_a": 0.9
      },
      "init_eqs_str": "a.gen=0;a.split_time=0;a.face_count=1;a.scale_factor=1;a.mouth_offset=0.08;",
      "frame_eqs_str": "a.split_time+=0.02;a.gen=Math.floor(a.split_time);a.face_count=pow(2,Math.min(a.gen,4));a.scale_factor=1/sqrt(a.face_count);a.rad=0.05*a.scale_factor;a.mouth_offset=0.08*a.scale_factor;a.ang=3.14159;",
      "init_eqs_eel": "gen = 0;\nsplit_time = 0;\nface_count = 1;\nscale_factor = 1;\nmouth_offset = 0.08;",
      "frame_eqs_eel": "split_time = split_time + 0.02;\ngen = int(split_time);\nface_count = pow(2, min(gen, 4));\nscale_factor = 1/sqrt(face_count);\nrad = 0.05 * scale_factor;\nmouth_offset = 0.08 * scale_factor;\nang = 3.14159;\n\n// Fractal positioning for mouth\noffset_x = 0.2 * scale_factor * sin(time * 0.5);\noffset_y = 0.2 * scale_factor * cos(time * 0.7);\n\nface_id = 0;\nrow = int(sqrt(face_count));\ncol = face_id % row;\nrow_num = int(face_id / row);\n\nspread = 0.4 * scale_factor;\nbase_x = 0.5 + (col - row/2) * spread + offset_x;\nbase_y = 0.5 + (row_num - row/2) * spread + offset_y;\n\nx = base_x;\ny = base_y + mouth_offset;\n\n// Animate smile\nr = 0.9 + 0.1*sin(time * 2);\ng = 0.3 + 0.2*cos(time * 1.5);\nb = 0.3 + 0.2*sin(time * 3);"
    }
  ],
  "waves": [
    {
      "baseVals": {
        "enabled": 0,
        "samples": 512,
        "sep": 0,
        "scaling": 1,
        "smoothing": 0.5,
        "r": 1,
        "g": 1,
        "b": 1,
        "a": 1
      },
      "init_eqs_eel": "",
      "frame_eqs_eel": "",
      "point_eqs_eel": ""
    },
    {
      "baseVals": {
        "enabled": 0,
        "samples": 512,
        "sep": 0,
        "scaling": 1,
        "smoothing": 0.5,
        "r": 1,
        "g": 1,
        "b": 1,
        "a": 1
      },
      "init_eqs_eel": "",
      "frame_eqs_eel": "",
      "point_eqs_eel": ""
    },
    {
      "baseVals": {
        "enabled": 0,
        "samples": 512,
        "sep": 0,
        "scaling": 1,
        "smoothing": 0.5,
        "r": 1,
        "g": 1,
        "b": 1,
        "a": 1
      },
      "init_eqs_eel": "",
      "frame_eqs_eel": "",
      "point_eqs_eel": ""
    },
    {
      "baseVals": {
        "enabled": 0,
        "samples": 512,
        "sep": 0,
        "scaling": 1,
        "smoothing": 0.5,
        "r": 1,
        "g": 1,
        "b": 1,
        "a": 1
      },
      "init_eqs_eel": "",
      "frame_eqs_eel": "",
      "point_eqs_eel": ""
    }
  ],
  "init_eqs_str": "a.generation=0;a.split_timer=0;a.max_faces=16;a.current_faces=1;",
  "frame_eqs_str": "a.split_timer+=0.01+0.005*a.bass;a.generation=Math.floor(a.split_timer);a.current_faces=Math.min(pow(2,a.generation),a.max_faces);a.zoom+=0.002*Math.sin(a.time*0.3);a.rot+=0.01*Math.cos(a.time*0.2);a.wave_r=0.8+0.2*Math.sin(a.time*0.7);a.wave_g=0.9+0.1*Math.cos(a.time*0.9);a.wave_b=0.4+0.3*Math.sin(a.time*1.1);",
  "pixel_eqs_str": "a.zoom+=0.001*a.rad*Math.sin(a.time+a.x*10+a.y*10);",
  "init_eqs_eel": "generation = 0;\nsplit_timer = 0;\nmax_faces = 16;\ncurrent_faces = 1;",
  "frame_eqs_eel": "split_timer = split_timer + 0.01 + 0.005*bass;\ngeneration = int(split_timer);\ncurrent_faces = min(pow(2, generation), max_faces);\n\n// Gentle camera movement\nzoom = zoom + 0.002*sin(time*0.3);\nrot = rot + 0.01*cos(time*0.2);\n\n// Color cycling\nwave_r = 0.8 + 0.2*sin(time*0.7);\nwave_g = 0.9 + 0.1*cos(time*0.9);\nwave_b = 0.4 + 0.3*sin(time*1.1);\n\n// Background effects\ncx = 0.5 + 0.02*sin(time*0.1);\ncy = 0.5 + 0.02*cos(time*0.13);",
  "pixel_eqs_eel": "// Radial zoom effect\nzoom = zoom + 0.001*rad*sin(time + x*10 + y*10);",
  "warp": " shader_body { \n  vec3 ret_1;\n  vec2 center = vec2(0.5, 0.5);\n  vec2 offset = uv - center;\n  float dist = length(offset);\n  float angle = atan(offset.y, offset.x);\n  \n  // Fractal warping\n  float warp_strength = 0.02 + 0.01*sin(time*2.0);\n  float fractal_freq = 8.0 + 4.0*sin(time*0.5);\n  vec2 warp_offset = warp_strength * vec2(\n    sin(fractal_freq * angle + time),\n    cos(fractal_freq * angle + time*1.3)\n  ) * (1.0 - dist);\n  \n  ret_1 = texture(sampler_main, uv + warp_offset).xyz;\n  ret_1 = ret_1 * (0.98 + 0.02*sin(time*3.0));\n  \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = ret_1;\n  ret = tmpvar_1.xyz;\n }",
  "comp": " shader_body { \n  vec3 ret_1;\n  vec2 center = vec2(0.5, 0.5);\n  vec2 offset = uv - center;\n  float dist = length(offset);\n  \n  // Get main texture\n  ret_1 = texture(sampler_main, uv).xyz;\n  \n  // Add fractal glow effect\n  vec3 blur_color = (texture(sampler_blur1, uv).xyz * scale1) + bias1;\n  ret_1 = ret_1 + blur_color * 0.3;\n  \n  // Add color enhancement\n  ret_1 = ret_1 * vec3(1.1, 1.0, 0.9);\n  \n  // Vignette effect\n  float vignette = 1.0 - smoothstep(0.3, 0.8, dist);\n  ret_1 = ret_1 * (0.7 + 0.3*vignette);\n  \n  // Final brightness adjustment\n  ret_1 = ret_1 * 1.2;\n  \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = ret_1;\n  ret = tmpvar_1.xyz;\n }"
} 